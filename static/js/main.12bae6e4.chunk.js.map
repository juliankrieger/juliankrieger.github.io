{"version":3,"sources":["assets/skull.gif","Components/Navbar.js","Components/AdSideBar.js","Components/Home.js","Components/Header.js","App.js","serviceWorker.js","index.js","assets/headerimage.jpg"],"names":["module","exports","__webpack_require__","p","Navbar","state","activeItem","handleItemClick","e","_ref","name","_this","setState","this","react_default","a","createElement","Segment","inverted","className","Menu","Item","active","onClick","Component","AdSideBar","React","Home","AdSideBar_AdSideBar","style","textDecoration","src_Components_Header","Header","Navbar_Navbar","App","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kNCInBC,qNACnBC,MAAQ,CAAEC,WAAY,UAEtBC,gBAAkB,SAACC,EAADC,GAAA,IAAMC,EAAND,EAAMC,KAAN,OAAiBC,EAAKC,SAAS,CAAEN,WAAYI,6EAEtD,IACCJ,EAAeO,KAAKR,MAApBC,WAER,OACEQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,UAAQ,EAACC,UAAU,cAC1BL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMD,UAAU,WACdL,EAAAC,EAAAC,cAACI,EAAA,EAAKC,KAAN,CAAWX,KAAK,OAAOY,OAAuB,SAAfhB,EAAuBiB,QAASV,KAAKN,kBACpEO,EAAAC,EAAAC,cAACI,EAAA,EAAKC,KAAN,CACEX,KAAK,WACLY,OAAuB,aAAfhB,EACRiB,QAASV,KAAKN,kBAEhBO,EAAAC,EAAAC,cAACI,EAAA,EAAKC,KAAN,CACEX,KAAK,UACLY,OAAuB,YAAfhB,EACRiB,QAASV,KAAKN,gBACdY,UAAU,wBArBcK,cCAfC,yMAEb,OACIX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBAHYO,IAAMF,YCAxBG,mLAGb,OACQb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACXL,EAAAC,EAAAC,cAACY,EAAD,CAAWT,UAAU,iBACrBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACZL,EAAAC,EAAAC,cAAA,MAAIa,MAAO,CAACC,eAAgB,cAA5B,mBACAhB,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,snCAyBPF,EAAAC,EAAAC,cAACY,EAAD,CAAWT,UAAU,0BAnCPO,IAAMF,WCCzBO,gBAAA,SAAAC,GACb,OACElB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UAEXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAACiB,EAAD,UCaKC,mLAXX,OACEpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACfL,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACmB,EAAD,eARUX,aCGEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECPNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBnD,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.12bae6e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/skull.c53b2e3c.gif\";","import React, { Component } from 'react'\nimport { Segment, Menu, Button } from 'semantic-ui-react'\nimport './Navbar.css'\n\nexport default class Navbar extends Component {\n  state = { activeItem: 'home' }\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  render() {\n    const { activeItem } = this.state\n\n    return (\n      <Segment inverted className=\"navSegment\">\n        <Menu className=\"navMenu\">\n          <Menu.Item name='home' active={activeItem === 'home'} onClick={this.handleItemClick} />\n          <Menu.Item\n            name='messages'\n            active={activeItem === 'messages'}\n            onClick={this.handleItemClick}\n          />\n          <Menu.Item\n            name='friends'\n            active={activeItem === 'friends'}\n            onClick={this.handleItemClick}\n            className=\"menuButton\"\n          />\n        </Menu>\n      </Segment>\n    )\n  }\n}","import React from 'react'\nimport './AdSideBar.css'\nimport skull from '../assets/skull.gif'\n\nexport default class AdSideBar extends React.Component{\n    render(){\n        return (\n            <div className=\"AdSideBar\">\n            </div>\n        );\n    }\n} ","import React from 'react'\nimport './Home.css'\nimport AdSideBar from './AdSideBar'\n\nexport default class Home extends React.Component{\n\n    render(){\n        return (\n                <div className=\"Home\">\n                    <AdSideBar className=\"Home-LeftBar\"/>\n                    <div className=\"Home-text-field\">\n                        <div className=\"Home-text\">\n                           <h2 style={{textDecoration: \"underline\"}}>Blog system tbd</h2>\n                           <p>Welcome to my website. I do blablabla</p>\n                           <p>\n                               16.01.2019: Today I head out to learn Rust until we're starting the\n                               integrated systems and IOT project at Uni. I am hoping to learn the language\n                                in a way that allows me to do integrated  systems programming and cross compile\n                                it to work on ARM processors, like the raspberry pi. Another option would be to just\n                                use docker containers. //#endregion\n\n                                However, due to the low comprehensibility of high-level Rust, I'm planning to only\n                                use it when low-level system calls, (unsafe) access to memory is needed (such as when\n                                trying to access iot devices with an exploit) or multi-threading (multi core scanning with nmap,\n                                streaming network devices via multiple interfaces, think of capturing FritzBox pcap data) are needed.\n\n                                I'm planning to use python in other circumstances, due to it being pseudo-code like and easily readable\n                                even when the reader is not an experienced programmer.\n\n                                I also plan to use ARCH ARM instead of the typical Raspbian on the Pi's we're\n                                going to work with, with the idea in mind that my knowledge of systemd features\n                                will enable me to control and secure all communication of iot devices to my //#endregion\n                                liking.\n\n\n                           </p>\n                        </div>\n                        \n                    </div>\n                    <AdSideBar className=\"Home-RightBar\"/>\n\n                </div>\n        );\n    };\n}","import React from 'react'\nimport Navbar from './Navbar';\n\nimport headerimage from './../assets/headerimage.jpg'\n\nexport default Header => {\n  return(\n    <div className=\"header\">\n        {/* <img src={headerimage} alt=\"\" className=\"headerImage\"></img> */}\n        <div className=\"headerImage\"/>\n        <div className=\"navWrapper\">\n          <Navbar />\n        </div>\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Home from './Components/Home';\n\nimport headerimage from './assets/headerimage.jpg'\n\nimport './Components/Header.css'\nimport Header from './Components/Header'\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n        <Header/>\n        <Home></Home>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/headerimage.c3168961.jpg\";"],"sourceRoot":""}