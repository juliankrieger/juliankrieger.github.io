{"version":3,"sources":["Components/Navbar.js","Components/AdSideBar.js","Components/Home.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["buttonStyle","marginLeft","marginRight","theme","createMuiTheme","palette","primary","Colors","secondary","menuButton","margin","Navbar","props","react_default","a","createElement","styles","AppBar_default","position","Toolbar_default","Typography_default","variant","color","Button_default","style","href","AdSideBar","class","React","Component","Home","className","AdSideBar_AdSideBar","App","rel","name","content","Components_Navbar","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oUASMA,EAAc,CAClBC,WAAY,GACZC,YAAa,IAGTC,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,QAASC,OACTC,UAAWD,WACXE,WAAY,CACVC,OAAQ,WAwBCC,MAnBf,SAAgBC,GAEd,OACEC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAA,iBAAD,CAAkBb,MAAOA,GACrBU,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,MAAM,WAA/B,QAGAT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,MAAOxB,EAAayB,KAAK,qDAAjC,uBC/BSC,kMAEb,OACIb,EAAAC,EAAAC,cAAA,OAAKY,MAAM,aACPd,EAAAC,EAAAC,cAAA,yBAJuBa,IAAMC,YCCxBC,mLAGb,OACQjB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,QACXlB,EAAAC,EAAAC,cAACiB,EAAD,CAAWD,UAAU,iBACrBlB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,mBACXlB,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAACiB,EAAD,CAAWD,UAAU,0BATPH,IAAMC,WC4BzBI,mLArBX,OACEpB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,QAAMmB,IAAI,aAAaT,KAAK,+DAC5BZ,EAAAC,EAAAC,cAAA,QAAMmB,IAAI,aAAaT,KAAK,4DAC5BZ,EAAAC,EAAAC,cAAA,QACEoB,KAAK,WACLC,QAAQ,4EAKZvB,EAAAC,EAAAC,cAAA,UAAQgB,UAAU,cAClBlB,EAAAC,EAAAC,cAACsB,EAAD,MACAxB,EAAAC,EAAAC,cAACuB,EAAD,eAlBUT,aCKEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.81f1d74a.chunk.js","sourcesContent":["import React from \"react\";\nimport * as Colors from '@material-ui/core/colors'\nimport {MuiThemeProvider } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst buttonStyle = {\n  marginLeft: 20,\n  marginRight: 20\n}\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: Colors.grey,\n    secondary: Colors.blueGrey,\n    menuButton: {\n      margin: \"30px\"\n    }\n  },\n})\n\nfunction Navbar(props) {\n\n  return (\n    <div>\n    <MuiThemeProvider theme={theme}>\n        <AppBar position=\"static\" >\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Home\n            </Typography>\n            <Button style={buttonStyle} href=\"https://juliankrieger.github.io/up-for-grabs.net/\"> Up For Grabs </Button>\n          </Toolbar>\n        </AppBar>\n      </MuiThemeProvider>\n    </div>\n  );\n}\n\n\nexport default Navbar;\n","import React from 'react'\nimport './AdSideBar.css'\n\nexport default class AdSideBar extends React.Component{\n    render(){\n        return (\n            <div class=\"AdSideBar\">\n                <p>TEST</p>\n            </div>\n        );\n    }\n} ","import React from 'react'\nimport './Home.css'\nimport AdSideBar from './AdSideBar'\n\nexport default class Home extends React.Component{\n\n    render(){\n        return (\n                <div className=\"Home\">\n                    <AdSideBar className=\"Home-LeftBar\"/>\n                    <div className=\"Home-text-field\">\n                        <p>Middle</p>\n                    </div>\n                    <AdSideBar className=\"Home-RightBar\"/>\n\n                </div>\n        );\n    };\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport Navbar from './Components/Navbar';\nimport Home from './Components/Home';\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <head>\n          <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" />\n          <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n          <meta\n            name=\"viewport\"\n            content=\"minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no\"\n          />\n        </head>\n\n\n        <header className=\"App-header\">\n        <Navbar />\n        <Home></Home>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}